
	checkForm = function(myForm){
		self = this;
		config.parentElem = '.row';
		config.errorClass = 'error';
		regEx = {
			email : /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
			postCode : /^((0[1-9])|([1-8][0-9])|(9[0-8])|(2A)|(2B))[0-9]{3}$/,
			phone : /^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$/
		};

		validations = {
			// Input type text
			"text" : {
				"empty" : {
					process : function(elem,validationType){
						if(elem.val() == ""){
							return false
						}else{
							return true
						}	
					},
					errorMessage : "Ce champ ne peut pas etre vide."	
				},
				"email" : {
					process : function(elem,validationType){
						if(!regEx[validationType].test(elem.val())){
							return false
						}else{
							return true
						}	
					},
					errorMessage : "Veuillez entrer un email valide."
				},
				"postCode" : {
					process : function(elem,validationType){	
						if(!regEx[validationType].test(elem.val())){
							return false
						}else{
							return true
						}	
					},
					errorMessage : "Veuillez entrer un code postal valide."

				},
				"phone" : {
					process : function(elem,validationType){
						if(!regEx[validationType].test(elem.val())){
							return false
						}else{
							return true
						}	
					},
					errorMessage : "Veuillez entrer un numero de téléphone valide."

				}
			},
			// Input type checkbox
	 		"checkbox" : {
	 			"checked" :{
	 				process : function(elem,validationType){
		 				if(elem.is(':checked')){
		 					return true
		 				}else{
		 					return false
		 				}	
	 				},
	 				errorMessage : "Veuillez cocher cette case."
	 			}

	 		},	
	 		// Input type radio
	 		"radio" : {
		 		"checked" :{
		 			process : function(elem,validationType){
			 			var radioGroup = $(elem).closest('.radio-group')

			 			if(radioGroup.find('input[type="radio"]:checked').length){
			 				return true
			 			}else{	
			 				return false
			 			}	
		 			},
		 			errorMessage : "Veuillez cocher au moins une case."
		 		}
			},	
			// select
	 		"select" : {
	 			"selected":{
	 				process : function(elem,validationType){

		 				if($(elem).find('option:selected').val() !=0){
							return true
						}else{	
							return false
						}	
	 				},
	 				errorMessage : "Veuillez choisr une option."	
	 			}	
			}
		};

		validator = function(that){

			var elem = that,
				elemType = ($(elem).is("input")) ? $(elem).attr('type') : 'select',
			    testToRun = $(elem).data('validation').split(','),
			    error = false

			console.log(validations)

			// testToRun return un aray avec 1 ou plusiuers test
			$(testToRun).each(function(index){
				var validationType = testToRun[index], // quel type de valid ?
				    validation =  validations[elemType][validationType].process // Select la bonne fonction

				if(!validation($(elem),validationType)){ // si la valid est fausse

					if(!$(elem).closest(config.parentElem).hasClass('error')){ //et si l'element n a pas deja d'erreur
						$(elem) // je met le erreur
						.closest(config.parentElem)
						.addClass(config.errorClass)
						.append('<p class="error-message">'+ validations[elemType][validationType].errorMessage+'</p>')	
					}

				}else{
					$(elem) // sinon valid est true, j enleve l erreur
					.closest(config.parentElem)
					.removeClass(config.errorClass)
					.find('.error-message')
					.remove()
				}
			})  	
		}	

		/*AU SUBMIT*/
		$(myForm).on('submit', function(e){
			e.preventDefault()
			$('.required',this).each(function(){
				validator(this)		
			})
		})
		/*AU BLUR */
		$(myForm).on('blur', '.required', function(e){
			if($(this).parents().hasClass('error')){
				validator(this)
			}		
		})
		/*ENVOIE OU PAS */
		if($('.error', this).length){
				console.log('error')
		}else{
			//alert('envoi')
		}
	};

(function($){
	$.fn.validathor = function(options){
	
		var config = {
			parentInput : 'class',
			errorClass : 'class',
			errorMessageClass : 'class',
			requiredClass : 'class',
			onErrorSubmit : null,
			onSuccessSubmit : null,
			onErrorfield : null,
			onSuccessfield : null
			
       	},
       
       	options = $.extend(config, options); 

		return {
       		hello : function(){
       			alert('hello')
       		}
       	};
		return this.each(function(){

			var self = this,
				regEx = {
				email : /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
				postCode : /^((0[1-9])|([1-8][0-9])|(9[0-8])|(2A)|(2B))[0-9]{3}$/,
				phone : /^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$/
			};

			var validations = {
				// Input type text
				"text" : {
					"empty" : {
						process : function(input,validationType){
							if(input.val() == ""){
								return false
							}else{
								return true
							}	
						},
						errorMessage : "Ce champ ne peut pas etre vide."	
					},
					"email" : {
						process : function(input,validationType){
							if(!regEx[validationType].test(input.val())){
								return false
							}else{
								return true
							}	
						},
						errorMessage : "Veuillez entrer un email valide."
					},
					"postCode" : {
						process : function(input,validationType){	
							if(!regEx[validationType].test(input.val())){
								return false
							}else{
								return true
							}	
						},
						errorMessage : "Veuillez entrer un code postal valide."

					},
					"phone" : {
						process : function(input,validationType){
							if(!regEx[validationType].test(input.val())){
								return false
							}else{
								return true
							}	
						},
						errorMessage : "Veuillez entrer un numero de téléphone valide."

					}
				},
				// Input type checkbox
				"checkbox" : {
					"checked" :{
						process : function(input,validationType){
							if(input.is(':checked')){
								return true
							}else{
								return false
							}	
						},
						errorMessage : "Veuillez cocher cette case."
					}

				},	
		 		// Input type radio
		 		"radio" : {
		 			"checked" :{
		 				process : function(input,validationType){
		 					var radioGroup = $(input).closest('.radio-group')

		 					if(radioGroup.find('input[type="radio"]:checked').length){
		 						return true
		 					}else{	
		 						return false
		 					}	
		 				},
		 				errorMessage : "Veuillez cocher au moins une case."
		 			}
		 		},	
				// select
				"select" : {
					"selected":{
						process : function(input,validationType){

							if($(input).find('option:selected').val() !=0){
								return true
							}else{	
								return false
							}	
						},
						errorMessage : "Veuillez choisr une option."	
					}	
				}
			};

			validator = function(that){

				var input = that,
					inputType = ($(input).is("input")) ? $(input).attr('type') : 'select',
					testToRun = $(input).data('validation').split(',')

				// testToRun return un aray avec 1 ou plusiuers test
				$(testToRun).each(function(index){
					var validationType = testToRun[index], // quel type de valid ?
					    validation =  validations[inputType][validationType].process // Select la bonne fonction

					if(!validation($(input),validationType)){ // si la valid est fausse

						/*ADDCLASS erreur */
						if(!$(input).closest('.'+config.parentInput).hasClass(config.errorClass)){ //et si l'element n a pas deja d'erreur
							/*CALLBACK => onErrorField*/
							if(config.onErrorfield){
								config.onErrorfield($(input))
							}
							$(input) // je met la class erreur
								.closest('.'+config.parentInput)
								.addClass(config.errorClass)
								.append('<p class="'+config.errorMessageClass+'">'+validations[inputType][validationType].errorMessage+'</p>')
						}

					}else{

						$(input) // sinon valid est true, j enleve l erreur
							.closest('.'+config.parentInput)
							.removeClass(config.errorClass)
							.find('.'+config.errorMessageClass)
							.remove()

						if(config.onSuccessfield){
							config.onSuccessfield($(input))
						} 
					}	
				}) 
			}	

			/*ON SUBMIT*/
			var submited = false // 
	
			$(this).on('submit', function(e){
				submited = true

				// lance la valid sur chaque champ
				$('.'+config.requiredClass,this).each(function(){
					validator(this)		
				})
				//Si erreur
				if($('.'+config.errorClass, this).length){
					
					if(config.onErrorSubmit){
						config.onErrorSubmit(e)
					}
				}else{ // si pas erreur
					if(config.onSuccessSubmit){
						config.onSuccessSubmit()
					}
				}
			})

			/*AU BLUR */
			$(this).on('blur', '.'+config.requiredClass, function(e){
				if(submited == true){
					console.log('fafa')
					validator(this)	
				}	
			})
		});

		return this;
	};

})(jQuery);

$(document).ready(function(){

	var valid = $('form').validathor({
		parentInput : 'row',
		errorClass : 'error',
		errorMessageClass : 'error-message',
		requiredClass : 'required',
		onErrorSubmit : function(e){
			e.preventDefault()

			alert('error')
		},
		onSuccessSubmit : function(){
			alert('success')
		},
		onErrorfield : function(input){
			console.log('erreur sur',input)
		},
		onSuccessfield: function(input){
			console.log('erreur enlevé ',input )
		}
		
	})

	console.log(valid.hello())

	
	//var validation = new checkForm('.form')
})